@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@inject HubConnection Hub
@inject IJSRuntime Js

<div class="terminal" @onclick="FocusInput">
    <div class="output" @ref="m_OutputDiv">
        @foreach (var line in m_Output)
        {
            <div class="@line.Type">@line.Text</div>
        }
    </div>
    <div class="input-line">
        <span class="prompt">@m_Prompt></span>
        <input @bind-value="m_Input"
               @bind-value:event="oninput"
               @onkeydown="HandleKeyPress"/>
    </div>
</div>

<style>
    .terminal {
        background-color: black;
        color: #00ff00;
        font-family: monospace;
        padding: 1rem;
        height: calc(100vh - 50px);
        display: flex;
        flex-direction: column;
        cursor: text;
    }

    .output {
        flex-grow: 1;
        overflow-y: auto;
    }

    .input-line {
        display: flex;
        gap: 0.5rem;
    }

    input {
        background: transparent;
        border: none;
        color: #00ff00;
        font-family: monospace;
        flex-grow: 1;
        outline: none;
    }

    .error {
        color: red;
    }

    .system {
        color: yellow;
    }

    .message {
        color: #00ff00;
    }
</style>

@code {
    private ElementReference m_OutputDiv;
    private string m_Input = "";
    private string m_Prompt = "guest";
    private readonly List<(string Text, string Type)> m_Output = [];
    private string m_NewName = "guest";
    private readonly List<string> m_CommandHistory = [];
    private int m_HistoryIndex = -1;
    private List<string> m_Members = [];

    protected override async Task OnAfterRenderAsync(bool firstRender) => await FocusInput();
    private async Task FocusInput() => await Js.InvokeVoidAsync("eval", "document.querySelector('.terminal input').focus()");

    protected override async Task OnInitializedAsync()
    {
        Hub.On<string, string>("ReceiveMessage", (user, message) =>
        {
            AddLine($"{user}: {message}", "message");
            return Task.CompletedTask;
        });

        Hub.On<List<string>>("RoomsUpdate", rooms =>
        {
            AddLine("Available rooms:", "system");
            foreach (var room in rooms)
            {
                AddLine($"- {room}", "system");
            }

            return Task.CompletedTask;
        });

        Hub.On<List<string>>("MembersUpdate", names => m_Members = names);

        SetupHubCallbacks();

        try
        {
            await Hub.StartAsync();
            AddLine("Connected to chat server", "system");
            AddLine("To display a set of available commands use /help", "system");
        }
        catch
        {
            AddLine("Failed to connect to server", "error");
        }
    }

    private void SetupHubCallbacks()
    {
        Hub.On("NameSetSuc", () =>
        {
            m_Prompt = m_NewName;
            StateHasChanged();
            AddLine("Name set successfully", "system");
            return Task.CompletedTask;
        });

        Hub.On("JoinRoomSuc", () =>
        {
            AddLine($"Joined room successfully", "system");
            return Task.CompletedTask;
        });

        Hub.On("LeaveRoomSuc", () =>
        {
            AddLine("Left room successfully", "system");
            return Task.CompletedTask;
        });

        Hub.On("CreateRoomSuc", () =>
        {
            AddLine("Room created successfully", "system");
            return Task.CompletedTask;
        });

        SetupErrorCallbacks();
    }

    private void SetupErrorCallbacks()
    {
        Hub.On("NameSetFail", () =>
        {
            AddLine("Failed to set name", "error");
            return Task.CompletedTask;
        });

        Hub.On("JoinRoomFail", () =>
        {
            AddLine("Failed to join room", "error");
            return Task.CompletedTask;
        });

        Hub.On("CreateRoomFail", () =>
        {
            AddLine("Failed to create room", "error");
            return Task.CompletedTask;
        });

        Hub.On("SendMessageFail", () =>
        {
            AddLine("Failed to send message", "error");
            return Task.CompletedTask;
        });
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter" when !string.IsNullOrWhiteSpace(m_Input):
                AddLine($"{m_Prompt}> {m_Input}", "message");
                m_CommandHistory.Insert(0, m_Input);
                m_HistoryIndex = -1;

                if (m_Input.StartsWith("/"))
                {
                    await HandleCommand();
                }
                else
                {
                    await Hub.SendAsync("SendMessage", m_Input);
                }

                m_Input = "";
                await Js.InvokeVoidAsync("scrollToBottom", m_OutputDiv);
                break;

            case "ArrowUp":
                if (m_CommandHistory.Count > 0)
                {
                    m_HistoryIndex = Math.Min(m_HistoryIndex + 1, m_CommandHistory.Count - 1);
                    m_Input = m_CommandHistory[m_HistoryIndex];
                    StateHasChanged();
                }

                break;

            case "ArrowDown":
                if (m_HistoryIndex >= 0)
                {
                    m_HistoryIndex--;
                    m_Input = m_HistoryIndex >= 0 ? m_CommandHistory[m_HistoryIndex] : "";
                    StateHasChanged();
                }

                break;
        }
    }

    private async Task HandleCommand()
    {
        var parts = m_Input.Split(' ');
        var command = parts[0].ToLower();

        switch (command)
        {
            case "/ls":
                await Hub.SendAsync("GetRooms");
                break;
            case "/members":
                await Hub.SendAsync("GetRooms");
                var namesString = string.Concat(m_Members.Select(m => m + " "));
                AddLine($"Members: {namesString}", "system");
                break;
            case "/join":
                if (parts.Length < 2)
                {
                    AddLine("Usage: /join <room>", "error");
                    return;
                }

                await Hub.SendAsync("JoinRoom", parts[1]);
                break;
            case "/leave":
                await Hub.SendAsync("LeaveRoom");
                break;
            case "/delete":
                if (parts.Length < 2)
                {
                    AddLine("Usage: /delete <room>", "error");
                    return;
                }

                await Hub.SendAsync("DeleteRoom", parts[1]);
                break;
            case "/create":
                if (parts.Length < 2)
                {
                    AddLine("Usage: /create <room>", "error");
                    return;
                }

                await Hub.SendAsync("CreateRoom", parts[1]);
                break;
            case "/name":
                if (parts.Length < 2)
                {
                    AddLine("Usage: /name <username>", "error");
                    return;
                }

                await Hub.SendAsync("SetName", parts[1]);
                m_NewName = parts[1];
                break;
            case "/help":
                ShowHelp();
                break;
            default:
                AddLine("Unknown command. Type /help for available commands", "error");
                break;
        }
    }

    private void ShowHelp()
    {
        AddLine("Available commands:", "system");
        AddLine("/name <username> - Set your username", "system");
        AddLine("/ls - List available rooms", "system");
        AddLine("/join <room> - Join a room", "system");
        AddLine("/leave - Leave current room", "system");
        AddLine("/create <room> - Create a new room", "system");
        AddLine("/help - Show this help message", "system");
    }

    private void AddLine(string text, string type)
    {
        m_Output.Add((text, type));
        StateHasChanged();
    }

}